extendeddata <- attach_ratings(setdata, ratingsdata)
booster <- sample_booster(setdata, n = samplesize)
rated_setdata <- attach_ratings(setdata, ratingsdata)
booster <- sample_booster(rated_setdata, n = samplesize)
booster
elig_cards <- rated_setdata$cards %>%
filter(!is.na(rating)) %>%
.[["number"]]
elig_cards
seq(dim(booster)[2])
b_nr <- 1
cards <- boosters[, b_nr]
boosters <- sample_booster(rated_setdata, n = samplesize)
cards <- boosters[, b_nr]
cards
card_ratings <- rated_setdata$cards %>%
filter(!is.na(rating)) %>%
.[["rating"]]
card_ratings
names(card_ratings) <- elig_cards
card_ratings
booster_cards <- boosters[, b_nr]
card_ratings[booster_cards]
ratings2probs(card_ratings[booster_cards])
setNames(rep(0, length(elig_cards)), elig_cards)
bc_probs <- ratings2probs(card_ratings[booster_cards])
bc_probs
booster_probs <- empty_probs
empty_probs <- setNames(rep(0, length(elig_cards)), elig_cards)
booster_probs <- empty_probs
booster_probs
booster_probs[booster_cards] <- ratings2probs(card_ratings[booster_cards])
booster_probs
samplesize = 100
boosters <- sample_booster(rated_setdata, n = samplesize)
foo <- lapply(seq(dim(boosters)[2]), fun = function(b_nr){
booster_cards <- boosters[, b_nr]
booster_probs <- empty_probs
booster_probs[booster_cards] <- ratings2probs(card_ratings[booster_cards])
booster_probs
})
foo <- lapply(seq(dim(boosters)[2]), FUN = function(b_nr){
booster_cards <- boosters[, b_nr]
booster_probs <- empty_probs
booster_probs[booster_cards] <- ratings2probs(card_ratings[booster_cards])
booster_probs
})
foo
foo %>% rbind
foo %>% bind_rows
foo <- apply(seq(dim(boosters)[2]), FUN = function(b_nr){
booster_cards <- boosters[, b_nr]
booster_probs <- empty_probs
booster_probs[booster_cards] <- ratings2probs(card_ratings[booster_cards])
booster_probs
})
foo <- sapply(seq(dim(boosters)[2]), FUN = function(b_nr){
booster_cards <- boosters[, b_nr]
booster_probs <- empty_probs
booster_probs[booster_cards] <- ratings2probs(card_ratings[booster_cards])
booster_probs
})
foo
foo %>% rowSums
foo %>% colSums
card_pickprobs <- sapply(seq(dim(boosters)[2]), FUN = function(b_nr){
booster_cards <- boosters[, b_nr]
booster_probs <- empty_probs
booster_probs[booster_cards] <- ratings2probs(card_ratings[booster_cards])
booster_probs
})
names(card_pickprobs)
rownames(card_pickprobs)
pickprobs_df <- data.frame(number = rownames(card_pickprobs),
p1p1 = rowSums(card_pickprobs) / samplesize)
pickprobs_df
mod_data <- rated_setdata
mod_data$cards <- left_join(mod_data$cards, pickprobs_df, by = "number")
pickprobs_df <- data.frame(number = rownames(card_pickprobs),
mod_data <- rated_setdata
mod_data$cards <- left_join(mod_data$cards, pickprobs_df, by = "number")
pickprobs_df <- data.frame(number = rownames(card_pickprobs),
p1p1 = rowSums(card_pickprobs) / samplesize,
row.names = NULL)
mod_data <- rated_setdata
mod_data$cards <- left_join(mod_data$cards, pickprobs_df, by = "number")
mod_data$cards
pickprobs_df %>% glimpse()
pickprobs_df <- data.frame(number = rownames(card_pickprobs),
p1p1 = rowSums(card_pickprobs) / samplesize,
stringsAsFactors = F,
row.names = NULL)
mod_data <- rated_setdata
mod_data$cards <- left_join(mod_data$cards, pickprobs_df, by = "number")
source('C:/Users/Felix/Desktop/mtganalyze/signaldetection/helpers.R', echo=TRUE)
foo <- compute_firstpicks(rated_setdata)
foo$cards
foo %>% arrange(p1p1) %>% View
foo$cards %>% arrange(p1p1) %>% View
foo$cards %>% arrange(desc(p1p1)) %>% View
source('C:/Users/Felix/Desktop/mtganalyze/signaldetection/helpers.R', echo=TRUE)
foo <- compute_firstpicks(rated_setdata)
foo$cards %>% arrange(desc(p1p1)) %>% View
source('C:/Users/Felix/Desktop/mtganalyze/signaldetection/helpers.R', echo=TRUE)
setdata <- load_setdata("RIX")
ratingdata <- load_cardratings("RIX")
rateddata <- attach_ratings(setdata, ratingdata)
sample(1:4, 0)
length(NULL)
source('C:/Users/Felix/Desktop/mtganalyze/signaldetection/helpers.R', echo=TRUE)
sample_booster(setdata, 10)
sample_booster(rateddata, 10)
source('C:/Users/Felix/Desktop/mtganalyze/signaldetection/helpers.R', echo=TRUE)
sample_booster(rateddata, 10)
source('C:/Users/Felix/Desktop/mtganalyze/signaldetection/helpers.R', echo=TRUE)
sample_booster(rateddata, 10)
sample_booster(rateddata, 10, "171")
n_booster = 10
fixcard = "171"
setdata = rateddata
content <- lapply(setdata$booster, function(x) first(x)) %>% unlist
content
## get set of rares, uncommons and commons
n_rares <- sum(content == "rare")
rares <- setdata$cards  %>%
filter(!is.na(rating), rarity %in% c("Rare", "Mythic Rare")) %>%
mutate(prob = ifelse(rarity == "Mythic Rare", 0.5, 1))
n_uncommons <- sum(content == "uncommon")
uncommons <- setdata$cards  %>%
filter(!is.na(rating), rarity %in% c("Uncommon"))
n_commons <- sum(content == "common")
commons <- setdata$cards  %>%
filter(!is.na(rating), rarity %in% c("Common"))
fixcard %in% c(rares$number, uncommons$number, commons$number)
fixcard %in% rares$number
if(!is.null(fixcard)){
if(fixcard %in% c(rares$number, uncommons$number, commons$number)){
if(fixcard %in% rares$number){
n_rares <- n_rares - 1
rares <- rares %>% filter(number != fixcard)
}
if(fixcard %in% uncommons$number){
n_uncommons <- n_uncommons - 1
uncommons <- uncommons %>% filter(number != fixcard)
}
if(fixcard %in% commons$number){
n_commons <- n_commons - 1
commons <- commons %>% filter(number != fixcard)
}
fix_sample <- rep(fixcard, n_booster)
} else {
warning("Fixed card not contained in set")
fix_sample <- character(0)
}
} else {
fix_sample <- character(0)
}
fix_sample
n_rares
r_sample <- sapply(seq(n_booster), function(i){
sample(rares$number, size = n_rares, replace = FALSE, prob = rares$prob)
})
u_sample <- sapply(seq(n_booster), function(i){
sample(uncommons$number, size = n_uncommons, replace = FALSE)
})
c_sample <- sapply(seq(n_booster), function(i){
sample(commons$number, size = n_commons, replace = FALSE)
})
r_sample
u_sample
dim(r_sample)
r_sample <- unlist
r_smaple
r_sample
r_sample %>% unlist
### sample rares, uncommons, commons for each booster
r_sample <- sapply(seq(n_booster), function(i){
sample(rares$number, size = n_rares, replace = FALSE, prob = rares$prob)
})
u_sample <- sapply(seq(n_booster), function(i){
sample(uncommons$number, size = n_uncommons, replace = FALSE)
})
c_sample <- sapply(seq(n_booster), function(i){
sample(commons$number, size = n_commons, replace = FALSE)
})
r_sample %>% unlist
u_sample %>% unlist
### sample rares, uncommons, commons for each booster
r_sample <- sapply(seq(n_booster), function(i){
sample(rares$number, size = n_rares, replace = FALSE, prob = rares$prob)
}) %>% unlist
u_sample <- sapply(seq(n_booster), function(i){
sample(uncommons$number, size = n_uncommons, replace = FALSE)
})
c_sample <- sapply(seq(n_booster), function(i){
sample(commons$number, size = n_commons, replace = FALSE)
})
rbind(fix_sample, r_sample, u_sample, c_sample)
r_sample <- sapply(seq(n_booster), function(i){
sample(rares$number, size = n_rares, replace = FALSE, prob = rares$prob)
})
rbind(fix_sample, r_sample, u_sample, c_sample)
source('C:/Users/Felix/Desktop/mtganalyze/signaldetection/helpers.R', echo=TRUE)
sample_booster(rateddata, 15, '171')
sample_booster(rateddata, 15, '14')
rated_setdata <- rateddata
samplesize = 10
fixcard
### cut down card rating vector
elig_cards <- rated_setdata$cards %>%
filter(!is.na(rating)) %>%
.[["number"]]
card_ratings <- rated_setdata$cards %>%
filter(!is.na(rating)) %>%
.[["rating"]]
names(card_ratings) <- elig_cards
#empty_probs <- setNames(rep(0, length(elig_cards)), elig_cards)
boosters <- sample_booster(rated_setdata, n = samplesize, fixcard = fixcard)
b_nr = 1
ppd <- numeric(0)
booster_cards <- boosters[, b_nr]
booster_cards
cp_probs <- ratings2probs(card_ratings[booster_cards])
cp_probs
cp_probs[fixcard]
samplecp_probs[-fixcard]
cp_probs[-fixcard]
cp_probs <- ratings2probs(card_ratings[booster_cards])
cp_probs
names(cp_probs)
cp_probs[-"171"]
setdiff(cp_probs, cp_probs[fixcard])
cp_probs[names(cp_probs)!=fixcard]
setdiff(names(cp_probs), fixcard)
res_cards <- setdiff(names(cp_probs), fixcard)
res_cards
cp_probs[res_cards]
pick <- sample(res_cards, size = 1, replace = FALSE, prob = cp_probs[res_cards])
pick
booster_cards <- setdiff(booster_cards, pick)
booster_cards
ppd <- numeric(0)
booster_cards <- boosters[, b_nr]
repeat{
cp_probs <- ratings2probs(card_ratings[booster_cards])
ppd <- c(ppd, cp_probs[fixcard])
res_cards <- setdiff(names(cp_probs), fixcard)
pick <- sample(res_cards, size = 1, replace = FALSE, prob = cp_probs[res_cards])
booster_cards <- setdiff(booster_cards, pick)
if(length(booster_cards) == 1) break
}
ppd
ppd <- numeric(0)
sum(ppd)
ppd <- numeric(0)
booster_cards <- boosters[, b_nr]
repeat{
cp_probs <- ratings2probs(card_ratings[booster_cards])
ppd <- c(ppd, (1 - sum(ppd)) * cp_probs[fixcard])
res_cards <- setdiff(names(cp_probs), fixcard)
pick <- sample(res_cards, size = 1, replace = FALSE, prob = cp_probs[res_cards])
booster_cards <- setdiff(booster_cards, pick)
if(length(booster_cards) == 1) break
}
ppd
plot(ppd)
sum(ppd)
### compute pick point distribution per booster
pickprobs <- sapply(seq(dim(boosters)[2]), FUN = function(b_nr){
ppd <- numeric(0)
booster_cards <- boosters[, b_nr]
repeat{
## compute card pick probabilities
cp_probs <- ratings2probs(card_ratings[booster_cards])
## compute probability of fixcard being still in pack times being picked next
ppd <- c(ppd, (1 - sum(ppd)) * cp_probs[fixcard])
## randomly pcik non-fixcard subject to pick_probs
res_cards <- setdiff(names(cp_probs), fixcard)
pick <- sample(res_cards, size = 1, replace = FALSE, prob = cp_probs[res_cards])
booster_cards <- setdiff(booster_cards, pick)
if(length(booster_cards) == 1) break
}
## return complete pick point distribution
c(ppd, 1 - sum(ppd))
})
pickprobs
setNames(1:4, NULL)
pickprobs <- sapply(seq(dim(boosters)[2]), FUN = function(b_nr){
ppd <- numeric(0)
booster_cards <- boosters[, b_nr]
repeat{
## compute card pick probabilities
cp_probs <- ratings2probs(card_ratings[booster_cards])
## compute probability of fixcard being still in pack times being picked next
ppd <- c(ppd, (1 - sum(ppd)) * cp_probs[fixcard])
## randomly pcik non-fixcard subject to pick_probs
res_cards <- setdiff(names(cp_probs), fixcard)
pick <- sample(res_cards, size = 1, replace = FALSE, prob = cp_probs[res_cards])
booster_cards <- setdiff(booster_cards, pick)
if(length(booster_cards) == 1) break
}
## return complete pick point distribution
setNames(c(ppd, 1 - sum(ppd)), NULL)
})
pickprobs
ppd_bybooster <- sapply(seq(dim(boosters)[2]), FUN = function(b_nr){
ppd <- numeric(0)
booster_cards <- boosters[, b_nr]
repeat{
## compute card pick probabilities
cp_probs <- ratings2probs(card_ratings[booster_cards])
## compute probability of fixcard being still in pack times being picked next
ppd <- c(ppd, (1 - sum(ppd)) * cp_probs[fixcard])
## randomly pcik non-fixcard subject to pick_probs
res_cards <- setdiff(names(cp_probs), fixcard)
pick <- sample(res_cards, size = 1, replace = FALSE, prob = cp_probs[res_cards])
booster_cards <- setdiff(booster_cards, pick)
if(length(booster_cards) == 1) break
}
## return complete pick point distribution
setNames(c(ppd, 1 - sum(ppd)), NULL)
})
samplesize
boosters
dim(boosters)[2]
dim(boosters)[2]
rowSums(ppd_bybooster) / samplesize
plot(rowSums(ppd_bybooster) / samplesize)
compute_pp_dist <- function(rated_setdata, fixcard, samplesize = 1000){
### cut down card rating vector
elig_cards <- rated_setdata$cards %>%
filter(!is.na(rating)) %>%
.[["number"]]
card_ratings <- rated_setdata$cards %>%
filter(!is.na(rating)) %>%
.[["rating"]]
names(card_ratings) <- elig_cards
### generate boosters
boosters <- sample_booster(rated_setdata, n = samplesize, fixcard = fixcard)
### compute pick point distribution per booster
ppd_bybooster <- sapply(seq(dim(boosters)[2]), FUN = function(b_nr){
ppd <- numeric(0)
booster_cards <- boosters[, b_nr]
repeat{
## compute card pick probabilities
cp_probs <- ratings2probs(card_ratings[booster_cards])
## compute probability of fixcard being still in pack times being picked next
ppd <- c(ppd, (1 - sum(ppd)) * cp_probs[fixcard])
## randomly pcik non-fixcard subject to pick_probs
res_cards <- setdiff(names(cp_probs), fixcard)
pick <- sample(res_cards, size = 1, replace = FALSE, prob = cp_probs[res_cards])
booster_cards <- setdiff(booster_cards, pick)
if(length(booster_cards) == 1) break
}
## return complete pick point distribution
setNames(c(ppd, 1 - sum(ppd)), NULL)
})
### summarize the results
rowSums(ppd_bybooster) / samplesize
}
compute_pp_dist(rated_setdata, "171", 10) %>% plot()
compute_pp_dist(rated_setdata, "171", 10) %>% plot()
compute_pp_dist(rated_setdata, "171", 10) %>% plot()
compute_pp_dist(rated_setdata, "171", 10) %>% plot()
compute_pp_dist(rated_setdata, "171", 10) %>% plot()
compute_pp_dist(rated_setdata, "171", 100) %>% plot()
compute_pp_dist(rated_setdata, "171", 100) %>% plot()
compute_pp_dist(rated_setdata, "171", 100) %>% plot()
compute_pp_dist(rated_setdata, "171", 100) %>% plot()
compute_pp_dist(rated_setdata, "171", 1000) %>% plot()
compute_pp_dist(rated_setdata, "171", 1000) %>% plot()
compute_pp_dist(rated_setdata, "171", 1000) %>% plot()
compute_pp_dist(rated_setdata, "171", 1000)
compute_pp_dist(rated_setdata, "171", 1000)
compute_pp_dist(rated_setdata, "171", 1000)
compute_pp_dist(rated_setdata, "86", 1000)
compute_pp_dist(rated_setdata, "147", 1000)
compute_pp_dist(rated_setdata, "170", 1000)
compute_pp_dist(rated_setdata, "1", 1000)
compute_pp_dist(rated_setdata, "1", 1000) %>% plot()
source("helpers.R")
source('~/.active-rstudio-document', echo=TRUE)
save(fsp, "firstpicks.Rdata")
save(fps, "firstpicks.Rdata")
?save
save(fps, file = "firstpicks.Rdata")
fps
fps$cards
fps$cards %>% glimpse
ratings2probs(1800, 2000)
source('C:/Users/Felix/Desktop/mtganalyze/signaldetection/helpers.R', echo=TRUE)
ratings2probs(1800, 2000)
ratings2probs(c(1800, 2000))
20 * ratings2probs(c(1800, 2000))
log(10)
400/log(10)
20 * ratings2probs(c(1800, 2000), 173.7)
20 * ratings2probs(c(2119, 2127), 173.7)
14 * ratings2probs(c(2119, 2127), 173.7)
14 * ratings2probs(c(1788, 1173), 173.7)
14 * ratings2probs(c(1284, 1760), 173.7)
20 * ratings2probs(c(1284, 1760), 173.7)
20 * ratings2probs(c(1550, 1617), 173.7)
20 * ratings2probs(c(1550, 1617), 200)
20 * ratings2probs(c(1550, 1617), 173.7)
source('C:/Users/Felix/Desktop/mtganalyze/signaldetection/helpers.R', echo=TRUE)
source('C:/Users/Felix/Desktop/mtganalyze/signaldetection/compute_p1p1.R', echo=TRUE)
fps$cards
fps$cards %>% arrange(desc(p1p1))
fps$cards %>% arrange(desc(p1p1)) %>% View
source('C:/Users/Felix/Desktop/mtganalyze/signaldetection/helpers.R', echo=TRUE)
ratings2probsRR <- function(ratings, coeff = 173.7){
if(length(ratings) == 0){return(1)}
### compute rating difference with respect to maximum rating
rating_diffs <- ratings - max(ratings)
### function to compute probs according to max probability based on log-odds relation
probs <- exp(rating_diffs / coeff)
probs / sum(probs)
}
ratings2probs(c(1600,1800, 2000))
ratings2probsRR(c(1600,1800, 2000))
ratings2probsRR(c(1600,1800))
ratings2probs(c(1600,1800))
ratings2probs(c(1600,2000))
ratings2probsRR(c(1600,2000))
source("helpers.R")
set_label <- "DOM"
sd <- load_setdata(set_label)
rd <- load_cardratings(set_label)
msd <- attach_ratings(sd, rd)
fps <- compute_firstpicks(msd)
fps %>% View
fps$cards %>% View
fps$cards %>% group_by(colorIdentity) %>% summarise(sum(p1p1))
fps$cards %>% group_by(colors) %>% summarise(sum(p1p1))
fps$cards %>% group_by(types) %>% summarise(sum(p1p1))
set_label <- "M19"
sd <- load_setdata(set_label)
rd <- load_cardratings(set_label)
msd <- attach_ratings(sd, rd)
setname <- "M19"
filepath
getwd()
filepath <- paste0("draftaholicsdata/", setname, ".txt")
rawdata <- read.table(filepath, sep = "\t")[[1]] %>% as.character()
rawdata
which(rawdata == "Which Card Would You Choose?")
which(rawdata == "Hover over a row to preview cards")
rawdata
rawdata <- read.table(filepath, sep = "\t")[[1]] %>% as.character()
rawdata
read.table(filepath, sep = "\t")
rawdata <- read.table(filepath, sep = "\t", quote = "")[[1]] %>% as.character()
data_index <- seq(which(rawdata == "Which Card Would You Choose?") + 2,
which(rawdata == "Hover over a row to preview cards") - 1)
dat <- rawdata[data_index]
df <- as.data.frame(t(matrix(dat, nrow = 3)), stringsAsFactors = FALSE)
names(df) <- c("rank", "name", "rating")
df <- df %>% mutate(rank = as.numeric(rank),
rating = as.numeric(rating))
list("timestamp" = file.mtime(filepath),
"carddata" = df)
source("helpers.R")
set_label <- "M19"
sd <- load_setdata(set_label)
rd <- load_cardratings(set_label)
msd <- attach_ratings(sd, rd)
fps <- compute_firstpicks(msd)
fps$cards %>% View
12 * 73
3150 + 3 * 587,29
3150 + 3 * 587.29
6 * (582 + 192)
source("helpers.R")
set_label <- "M19"
sd <- load_setdata(set_label)
rd <- load_cardratings(set_label)
msd <- attach_ratings(sd, rd)
set.seed(1337)
samplepack <- crackapack(msd)
samplepack
set.seed(1000)
samplepack <- crackapack(msd)
samplepack
set.seed(10)
samplepack <- crackapack(msd)
samplepack
set.seed(100)
samplepack <- crackapack(msd)
set.seed(100)
samplepack
fps <- compute_firstpicks(msd)
save(samplepack, fps, file = "firstpicks.Rdata")
getwd()
source("helpers.R")
set_label <- "M19"
sd <- load_setdata(set_label)
rd <- load_cardratings(set_label)
msd <- attach_ratings(sd, rd)
fps <- compute_firstpicks(msd)
set.seed(100)
samplepack <- crackapack(msd)
save(samplepack, fps, file = "results/firstpicks.Rdata")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
